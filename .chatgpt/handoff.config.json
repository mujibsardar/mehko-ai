{
    "issue": "Need script to identify non-fillable PDF forms in data/applications directory",
    "problem": "No automated way to detect which form.pdf files are not AcroForm type (fillable) vs static PDFs",
    "ask": "Create a script that scans data/applications/{countyid}/{formname}/ directories and identifies which form.pdf files are NOT fillable (non-AcroForm type)",
    "include": [
        {
            "path": "data/applications/",
            "max_lines": 100
        },
        {
            "path": "python/overlay/acroform_handler.py",
            "max_lines": 100
        },
        {
            "path": "scripts/",
            "max_lines": 50
        },
        {
            "path": "src/components/forms/AcroFormViewer.jsx",
            "max_lines": 50
        }
    ],
    "extra": [
        "find data/applications -name 'form.pdf' -type f",
        "ls -la data/applications/*/forms/*/",
        "python -c \"import PyPDF2; print('PyPDF2 available')\"",
        "pip list | grep -i pdf"
    ],
    "context": {
        "current_state": "PDF forms stored in data/applications/{countyid}/{formname}/ directories, but no way to identify which are fillable",
        "target_state": "Script that can detect and report non-fillable PDF forms",
        "directory_structure": "data/applications/{countyid}/{formname}/form.pdf",
        "pdf_types": [
            "AcroForm (fillable with form fields)",
            "Static PDF (non-fillable, just content)",
            "Mixed (some fields but not full AcroForm)"
        ]
    },
    "script_requirements": {
        "name": "detect-non-fillable-forms.mjs or detect-non-fillable-forms.py",
        "functionality": [
            "Scan data/applications directory recursively",
            "Find all form.pdf files",
            "Analyze each PDF to determine if it's AcroForm type",
            "Report which forms are NOT fillable",
            "Provide summary statistics"
        ],
        "output_format": [
            "List of non-fillable forms with paths",
            "Count of fillable vs non-fillable",
            "Summary by county/application",
            "JSON output option for programmatic use"
        ]
    },
    "technical_approach": {
        "pdf_analysis": [
            "Use PyPDF2 to check for AcroForm fields",
            "Look for /AcroForm dictionary in PDF",
            "Check for /Fields array with form elements",
            "Detect interactive form capabilities"
        ],
        "script_language": "Python (better PDF libraries) or Node.js (if PyPDF2 available)",
        "dependencies": "PyPDF2, pathlib, json, argparse"
    },
    "detection_criteria": {
        "fillable_indicators": [
            "PDF has /AcroForm dictionary",
            "PDF has /Fields array with form elements",
            "PDF has interactive form annotations",
            "PDF responds to form field interactions"
        ],
        "non_fillable_indicators": [
            "No /AcroForm dictionary",
            "No /Fields array",
            "Static content only",
            "No interactive elements"
        ]
    },
    "workflow": [
        "1. Create script file (detect-non-fillable-forms.py)",
        "2. Implement PDF scanning logic using PyPDF2",
        "3. Add command line arguments for output format",
        "4. Test with existing PDF files",
        "5. Add error handling for corrupted PDFs",
        "6. Generate comprehensive report"
    ],
    "script_features": {
        "scanning": "Recursive directory traversal",
        "analysis": "PDF structure examination",
        "reporting": "Detailed and summary reports",
        "output": "Console, JSON, or CSV formats",
        "filtering": "By county, by application, by fillable status"
    },
    "expected_output": {
        "console": "Human-readable summary with counts and lists",
        "json": "Structured data for programmatic processing",
        "csv": "Spreadsheet-friendly format for analysis",
        "detailed": "Full analysis of each PDF with reasons"
    },
    "usage_examples": [
        "./scripts/detect-non-fillable-forms.py --summary",
        "./scripts/detect-non-fillable-forms.py --json > report.json",
        "./scripts/detect-non-fillable-forms.py --county san_diego_county_mehko",
        "./scripts/detect-non-fillable-forms.py --verbose"
    ],
    "verification": [
        "Script runs without errors",
        "Correctly identifies known AcroForm PDFs",
        "Correctly identifies known static PDFs",
        "Provides accurate counts and summaries",
        "Handles edge cases (corrupted PDFs, missing files)"
    ]
}