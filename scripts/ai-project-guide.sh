#!/bin/bash

# AI Project Guide Script
# This script outputs comprehensive information for AI assistants working on this project
# Usage: ./scripts/ai-project-guide.sh

echo "ü§ñ MEHKO AI PROJECT - COMPREHENSIVE GUIDE FOR AI ASSISTANTS"
echo "============================================================"
echo ""

echo "üö® CRITICAL RULES - READ FIRST!"
echo "================================"
echo "BEFORE making ANY changes to this project, you MUST:"
echo "1. üìñ READ ALL RULES in .cursor/rules/ directory"
echo "2. ‚ùì ASK PERMISSION before any code changes"
echo "3. üìã EXPLAIN CHANGES before proceeding"
echo "4. ‚è∏Ô∏è  WAIT FOR APPROVAL before executing"
echo ""

echo "üö´ NEVER DO THIS:"
echo "- ‚ùå Make changes without permission"
echo "- ‚ùå Assume changes are approved"
echo "- ‚ùå Skip reading the rules"
echo "- ‚ùå Proceed without explanation"
echo "- ‚ùå Create files in project root"
echo "- ‚ùå Commit changes on main branch"
echo ""

echo "‚ö†Ô∏è  CRITICAL WARNING ABOUT MAIN BRANCH:"
echo "========================================"
echo "üö® NEVER COMMIT CHANGES ON MAIN BRANCH!"
echo "üö® NEVER COMMIT CHANGES ON MAIN BRANCH!"
echo "üö® NEVER COMMIT CHANGES ON MAIN BRANCH!"
echo ""
echo "The main branch is for:"
echo "- ‚úÖ Merging completed features from other branches"
echo "- ‚úÖ Deploying to production"
echo "- ‚úÖ Reading and reviewing code"
echo ""
echo "The main branch is NOT for:"
echo "- ‚ùå Making direct code changes"
echo "- ‚ùå Committing new features"
echo "- ‚ùå Fixing bugs directly"
echo "- ‚ùå Any development work"
echo ""
echo "ALWAYS work from feature branches!"
echo ""

echo "üìã REQUIRED WORKFLOW FOR EVERY CHANGE:"
echo "======================================"
echo "üîß PROPOSED CHANGES:"
echo "‚îú‚îÄ‚îÄ File: [filename]"
echo "‚îú‚îÄ‚îÄ Action: [create/modify/delete]"
echo "‚îú‚îÄ‚îÄ Purpose: [why this change is needed]"
echo "‚îú‚îÄ‚îÄ Impact: [what this will affect]"
echo "‚îî‚îÄ‚îÄ Risk Level: [low/medium/high]"
echo ""
echo "‚ùì May I proceed with these changes?"
echo ""

echo "üìö ESSENTIAL DOCUMENTS TO READ FIRST:"
echo "====================================="
echo "- AI_INSTRUCTIONS.md - Project-level AI instructions"
echo "- .cursor/rules/README.md - Overview of all rules"
echo "- .cursor/rules/05-code-changes.md - Code change requirements"
echo "- .cursor/rules/02-git-workflow.md - Git workflow"
echo "- .cursor/rules/01-file-organization.md - File organization"
echo "- .cursor/rules/03-state-checking.md - State verification"
echo "- .cursor/rules/04-server-management.md - Server management"
echo ""

echo "üîß GIT WORKFLOW RULES:"
echo "======================"
echo "‚ö†Ô∏è  MAIN BRANCH RULES:"
echo "- üö® NEVER make changes directly on main branch"
echo "- üö® NEVER commit changes on main branch"
echo "- üö® NEVER work on main branch for development"
echo ""
echo "Branch Management:"
echo "- ALWAYS create a new branch for changes unrelated to current work"
echo "- NEVER make changes directly on main branch"
echo "- NEVER commit changes on main branch"
echo "- ALWAYS ask before creating new branches"
echo "- Use descriptive branch names: feature/description or fix/description"
echo ""
echo "Before Making Code Changes:"
echo "1. ALWAYS ask permission before making any code changes"
echo "2. ALWAYS explain what changes you're about to make"
echo "3. ALWAYS check current git status first"
echo "4. NEVER assume changes are approved"
echo ""

echo "üíæ COMMITTING RULES:"
echo "===================="
echo "- NEVER use 'git add .' immediately after making changes"
echo "- NEVER commit changes on main branch"
echo "- ALWAYS pause after making changes and ask: 'Are you ready to commit these changes?'"
echo "- ALWAYS wait for user confirmation before committing"
echo "- ALWAYS commit frequently with meaningful messages"
echo "- NEVER commit API keys, secrets, or sensitive information"
echo ""

echo "üöÄ PREFERRED GIT FLOW (One-Liner):"
echo "==================================="
echo "Use this exact sequence when merging feature branches:"
echo "git add . && git commit -m 'descriptive message' && git push origin feature-branch && git checkout main && git merge feature-branch && git push origin main"
echo ""

echo "üöÄ PROJECT SCRIPTS - ALWAYS USE THESE:"
echo "======================================"
echo "This project has built-in scripts for common operations. ALWAYS use these instead of manual commands!"
echo ""
echo "Git Operations:"
echo "- ./scripts/git-all.sh 'message' - Stage, commit, push to current branch"
echo "- ./scripts/git-merge-main.sh 'message' - Complete workflow: commit, push, merge to main, push main"
echo ""
echo "Server Management:"
echo "- ./scripts/status-all-services.sh - Check all server statuses"
echo "- ./scripts/start-all-services.sh - Start all servers"
echo "- ./scripts/stop-all-services.sh - Stop all servers"
echo "- ./scripts/restart-all-services.sh - Restart all servers"
echo ""
echo "Why Use Scripts?"
echo "‚úÖ Consistent workflow across team"
echo "‚úÖ Built-in safety checks"
echo "‚úÖ Proper error handling"
echo "‚úÖ Follows project standards"
echo "‚úÖ Reduces human error"
echo "‚úÖ Never commit on main branch (scripts prevent this)"
echo ""

echo "üìÅ PROJECT STRUCTURE & ORGANIZATION:"
echo "===================================="
echo "Key Directories:"
echo "- src/ - Main React application source code"
echo "- tests/ - All test files (unit + e2e)"
echo "- scripts/ - Utility and management scripts"
echo "- docs/ - Project documentation"
echo "- .cursor/rules/ - AI assistant rules and guidelines"
echo ""
echo "File Organization Rules:"
echo "- NEVER create files in project root"
echo "- Place new files in appropriate subdirectories"
echo "- Follow existing naming conventions"
echo ""

echo "üß™ TESTING INFRASTRUCTURE:"
echo "=========================="
echo "We use TWO types of testing:"
echo ""
echo "1. Unit Tests (Fast & Simple) ‚úÖ"
echo "   - What: Test individual pieces of code"
echo "   - Speed: Very fast (2-3 seconds)"
echo "   - Tools: Vitest + React Testing Library"
echo "   - Location: tests/unit/ folder"
echo "   - Command: npm test"
echo ""
echo "2. E2E Tests (Slow & Complete) üêå"
echo "   - What: Test the entire app like a real user would"
echo "   - Speed: Slower (2-5 minutes)"
echo "   - Tools: Playwright"
echo "   - Location: tests/e2e/ folder"
echo "   - Command: npx playwright test tests/e2e/"
echo ""

echo "üîß SERVER MANAGEMENT:"
echo "====================="
echo "Use these existing scripts for server management:"
echo "- ./scripts/status-all-services.sh - Check server status"
echo "- ./scripts/start-all-services.sh - Start all servers"
echo "- ./scripts/stop-all-services.sh - Stop all servers"
echo "- ./scripts/restart-all-services.sh - Restart all servers"
echo ""

echo "üìù CODE CHANGE WORKFLOW:"
echo "========================"
echo "1. Analyze the current situation"
echo "2. Explain what needs to be changed and why"
echo "3. Ask for permission to proceed"
echo "4. Wait for user confirmation"
echo "5. Execute changes only after approval"
echo "6. Verify changes were applied correctly"
echo "7. Ask if user wants to test before committing"
echo ""

echo "‚úÖ AFTER MAKING CHANGES:"
echo "======================="
echo "1. Pause and ask: 'Are you ready to commit these changes?'"
echo "2. Wait for user to test changes first"
echo "3. Never use 'git add .' immediately"
echo "4. Always explain what was changed"
echo "5. Provide a summary of modifications"
echo "6. Use project scripts for committing:"
echo "   - ./scripts/git-all.sh 'message' - for feature branch commits"
echo "   - ./scripts/git-merge-main.sh 'message' - for merging to main"
echo ""

echo "üÜò EMERGENCY PROTOCOL:"
echo "======================"
echo "Even in critical situations:"
echo "1. Explain the urgency"
echo "2. Ask for permission"
echo "3. Explain risks of not acting"
echo "4. Get explicit approval"
echo ""

echo "üéØ KEY PRINCIPLES TO REMEMBER:"
echo "=============================="
echo "‚úÖ Always Ask Permission - Never make changes without explicit approval"
echo "‚úÖ Check State First - Always verify current project state before working"
echo "‚úÖ Use Existing Tools - Leverage project scripts and established workflows"
echo "‚úÖ Organize Properly - Never create files in project root"
echo "‚úÖ Follow Git Flow - Use proper branching and commit practices"
echo "‚úÖ Never Work on Main - Always work from feature branches"
echo "‚úÖ Remember Scripts - Always use project server management scripts"
echo ""

echo "üìä BEFORE EVERY SESSION:"
echo "========================"
echo "AI assistants should:"
echo "1. Read all rule files"
echo "2. Check current project state"
echo "3. Ask permission before any changes"
echo "4. Follow established workflows"
echo "5. Use project-specific tools and scripts"
echo ""

echo "üîç QUICK REFERENCE COMMANDS:"
echo "============================"
echo "# Server Management"
echo "./scripts/status-all-services.sh    # Check server status"
echo "./scripts/start-all-services.sh     # Start all servers"
echo "./scripts/stop-all-services.sh      # Stop all servers"
echo "./scripts/restart-all-services.sh   # Restart all servers"
echo ""
echo "# Testing"
echo "npm test                            # Run unit tests"
echo "npx playwright test tests/e2e/     # Run e2e tests"
echo ""
echo "# Git Workflow"
echo "./scripts/git-all.sh 'message'     # Stage, commit, push to current branch"
echo "./scripts/git-merge-main.sh 'msg'  # Complete workflow to main"
echo ""

echo "üí° REMEMBER:"
echo "============"
echo "This project follows strict development practices."
echo "Always ask permission first!"
echo "Never assume changes are approved!"
echo "Follow the established workflows!"
echo "üö® NEVER COMMIT ON MAIN BRANCH!"
echo ""

echo "üéâ You're now ready to work on the MEHKO AI project safely and effectively!"
echo "========================================================================"
